@page "/cart"

@using System.Collections.Generic
@using front__wasm.Shared
@using front__wasm.Services
@using front__wasm.Models
@inject CartService CartService

<div class="container mx-auto px-4 py-8 md:py-12">
  <h1 class="text-3xl md:text-4xl font-bold mb-6 md:mb-8 text-center text-gray-200">Carrinho de Compras</h1>

  <div class="flex flex-col lg:flex-row gap-6 md:gap-8">
    <div class="w-full lg:w-2/3">
      <div class="bg-[#2d2d25] rounded-lg shadow-xl p-4 md:p-6 border border-gray-700 backdrop-blur-sm backdrop-filter">
        <div class="hidden sm:grid sm:grid-cols-5 sm:gap-4 pb-4 border-b border-gray-600 mb-4 font-bold text-gray-200">
          <div class="col-span-2">Serviço</div>
          <div class="text-center">Quantidade</div>
          <div class="text-center">Preço</div>
          <div class="text-center">Total</div>
        </div>

        @if (CartService.CartItems == null || !CartService.CartItems.Any())
        {
          <div class="text-center py-12 md:py-16 px-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            <p class="text-xl text-gray-300 font-medium">Seu carrinho está vazio.</p>
            <a href="/catalog" class="mt-4 inline-block px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition duration-300">
              Continuar comprando
            </a>
          </div>
        }
        else
        {
          <div class="space-y-2">
            @foreach (var item in CartService.CartItems)
            {
              <CartItem 
                ImageUrl="@item.ImageUrl" 
                ImageAlt="@item.ImageAlt" 
                Title="@item.Title" 
                Description="@item.Description" 
                UnitPrice="@item.UnitPrice" 
                Quantity="@item.Quantity" 
                OnQuantityChanged="@(qty => UpdateQuantity(item, qty))" 
                OnRemoveClicked="@(() => ShowDeleteConfirmation(item))" />
            }
          </div>
        }
      </div>
    </div>

    <div class="w-full lg:w-1/3">
      <OrderSummary 
        Subtotal="@CalculateSubtotal()" 
        ServiceFee="2.00m" 
        OnCheckoutClicked="@HandleCheckout" />
    </div>
  </div>
</div>

<CheckoutConfirmationDialog 
  IsVisible="@showCheckoutConfirmation"
  Title="Pedido concluído!"
  Message="Sua compra foi finalizada com sucesso. Obrigado pela preferência!"
  OnClose="@HandleCheckoutConfirmationClose" />

<DeleteConfirmationDialog
  IsVisible="@showDeleteConfirmation"
  Title="Remover item"
  Message="@($"Tem certeza que deseja remover '{itemToDelete?.Title}' do carrinho?")"
  OnConfirm="@ConfirmDeleteItem"
  OnCancel="@CancelDeleteItem" />

@code {
    private bool showCheckoutConfirmation = false;
    private bool showDeleteConfirmation = false;
    private CartItemModel? itemToDelete = null;

    private void UpdateQuantity(CartItemModel item, int newQuantity)
    {
        CartService.UpdateQuantity(item, newQuantity);
    }

    private void ShowDeleteConfirmation(CartItemModel item)
    {
        itemToDelete = item;
        showDeleteConfirmation = true;
    }

    private void ConfirmDeleteItem()
    {
        if (itemToDelete != null)
        {
            CartService.RemoveItem(itemToDelete);
        }
        showDeleteConfirmation = false;
    }

    private void CancelDeleteItem()
    {
        showDeleteConfirmation = false;
        itemToDelete = null;
    }

    private decimal CalculateSubtotal()
    {
        return CartService.GetSubtotal();
    }

    private void HandleCheckout()
    {
        showCheckoutConfirmation = true;
    }

    private void HandleCheckoutConfirmationClose()
    {
        showCheckoutConfirmation = false;
        CartService.ClearCart();
    }
}
